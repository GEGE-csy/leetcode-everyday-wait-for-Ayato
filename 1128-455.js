// 假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。
// 对每个孩子 i，都有一个胃口值 g[i]，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j，都有一个尺寸 s[j] 。如果 s[j] >= g[i]，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。
// 你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。

// 输入: g = [1,2,3], s = [1,1]
// 输出: 1
// 解释: 
// 你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。
// 虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。
// 所以你应该输出1。

/**
 * @param {number[]} g
 * @param {number[]} s
 * @return {number}
 */
// // 贪心策略，小饼干满足胃口小的孩子，大饼干满足胃口大的孩子
// 两个数组先进行升序排序，循环的终止条件是饼干发完了或者孩子全部满足了
// 用双指针分别遍历两个数组，当饼干尺寸可以满足小孩的时候，指针ij一起后移
//                         当饼干尺寸不可以满足小孩的时候，指向饼干尺寸的指针j后移，（去指尺寸更大的饼干
 var findContentChildren = function(g, s) {
  g.sort((a,b) => a-b);
  s.sort((a,b) => a-b);
  let i = 0, j = 0;
  let res = 0;
  while(i < g.length && j < s.length) {
     if(s[j] >= g[i]) {
         i++,j++;
         res++;
     } else {
         j++;
     }  
  }
  return res;
};